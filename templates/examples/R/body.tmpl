{{top "Remote Persistent Memory"}}

<p class="intro">
XXX
- what is RPMEM?
- what is the difference between PMEM and RPMEM?
- what RPMEM is good for?
- what the trainee will do during this tutorial (high-level)?
- expected outcomes for the trainee

{{template "scrollToContinue"}}

<p>
XXX
- introduce what step-by-step will happen during this tutorial
    - ping / rping connectivity check
    - a simple "just esablish a connection" program
    - the final program general idea

{{step "Connectivity check"}}

<p>
In order to have a real RDMA network you have to have:
<ul>
    <li>two machines both equipped with RDMA-capable network adapters connected to each other,</li>
    <li>libibverbs and librdmacm libraries installed in both systems (or the rdma-core package containing both of them).</li>
</ul>

<p>
Alternatively, for development purposes, you can use a software-emulated RDMA network interface (SoftRoCE) which requires:
<ul>
    <li>one machine with a regular Ethernet network adapter,</li>
    <li>the above listed libraries and</li>
    <li>the 'rdma_rxe' kernel module loaded.</li>
</ul>

<p>
All used network interfaces should be configured, up and running with an IP address assigned.

<p>
In this step, we will check the basic Ethernet network connectivity using the ping command
(see the <a href="https://linux.die.net/man/8/ping" target="_blank">ping(8) manual</a> for details).

{{edit "run_test_ping.sh"}}

{{run "./run_test_ping.sh"}}

<p>
In this step we will check the RDMA CM connection with the RDMA ping-pong test using the rping command
(provided by the librdmacm-utils package).

<p>
The rping(1) command establishes a reliable RDMA connection between two nodes using librdmacm
and optionally performs RDMA transfers between the nodes, then disconnects. When rping works,
we know that the RDMA connection is correctly configured and works well.

{{edit "run_test_rping.sh"}}

{{run "./run_test_rping.sh"}}

{{step "Establishing a connection"}}

<p>
XXX
- introduce the librpma library
- maybe put here the schematic showing where librpma fits into the Linux RDMA-capable stack
- describe that the following program focuses solely on establishing a connection

{{edit "simple_client.c" "simple_server.c" "connection.h" "connection.c" "CMakeLists.txt" "build_simple.sh"}}

{{build "./build_simple.sh"}}

{{edit "run_simple.sh"}}

{{run "./run_simple.sh"}}

{{step "Remote Persistent Memory access"}}

<p>
XXX
- introduce used rpma_read/write/flush() operations and
- describe their role in achieving remote persistency
- describe what the example does
- refer the "connection.h" "connection.c" files are taken from the previous step

{{edit "client.c" "server.c" "connection.h" "build_main.sh"}}

{{build "./build_main.sh"}}

{{edit "run_main.sh"}}

{{run "./run_main.sh"}}

{{summary}}

<p>
During this session, you have:
<ul>
    <li>checked basic network connectivity</li>
    <li>checked whether the network is RDMA-capable</li>
    <li>established a connection using the librpma library</li>
    <li>read and written back RPMem's content in the persistent way</li>
</ul>

<p>
Takeaways:
<ul>
    <li>Remote Persistent Memory (RPMem) is a way of accessing Persistent Memory when it is installed in a remote system</li>
    <li>RPMem leverages RDMA capabilities to achieve e.g.:
        <ul>
            <li>zero-copy read of the contents of RPMem</li>
            <li>single-sided persistency of the PMem's contents on the remote system</li>
        </ul>
    </li>
    <li>RPMem is a way to seamlessly incorporate PMem into modern cloud architectures</li>
    <li>The librpma library is a ready to use simple API incarnating RPMem principles</li>
</ul>

<p>
If you want to learn more:
<ul>
    <li><a href="https://github.com/pmem/rpma" target="_blank">https://github.com/pmem/rpma</a> - where librpma is forged
        <ul>
            <li>We especially recommend getting familiar with <a href="https://github.com/pmem/rpma/tree/master/examples" target="_blank">examples</a> that allows you to learn about other supported use-cases.</li>
        </ul>
    </li>
    <li><a href="https://pmem.io/rpma/" target="_blank">https://pmem.io/rpma/</a> - where you can find the librpma library manuals, configuration guidelines and performance reports</li>
    <li>It may be also useful to read our whitepaper: <a href="https://www.intel.com/content/www/us/en/developer/articles/technical/persistent-memory-replication-over-traditional-rdma-part-1-understanding-remote-persistent.html" target="_blank">Persistent Memory Replication Over Traditional RDMA</a>
        <ul>
            <li><b>Note</b> it describes RPMem in the context of the librpmem library (do not confuse with librpma) which is a completely different story.</li>
        </ul>
    </li>
</ul>

<p>
Thank you very much for your attention!

<p>
Yours sincerely<br/>
RPMem PMDK Squad

{{bottom}}
