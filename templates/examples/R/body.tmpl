{{top "Remote Persistent Memory"}}

<p class="intro">
I assume you already know what Persistent Memory is and hopefully you have learned many possible ways of benefiting from using it in your applications. In this example I want to introduce to you a basic way of accessing the very same Persistent Memory but when it is installed in a remote system. Remote Persistent Memory (or RPMEM for short) is a way of doing this by making use of the Remote Direct Memory Access (RDMA) network.

<p>
You may ask why you even bother doing so? Why your application simply cannot run on the remote system where the already mentioned Persistent Memory is installed instead of on yet another system? Why complicate the solution?

<p>
There are many possible answers to all of these questions:
<ul>
    <li>scalability<li>
    <li>fail-safety</li>
    <li>redundancy<li>
    <li>migrability<li>
    <li>configurability<li>
    <li>...</li>
</ul>

<p>
Long story short, RPMEM is a way how to fit Persistent Memory into modern cloud-based applications.

<p>
Before we go any further, you have to understand despite PMEM and RPMEM both making use of the same Persistent Memory, RPMEM access Persistent Memory via the network. Network technologies develop rapidly but they are still a few orders of magnitude slower compared to accessing the local memory directly. This makes PMEM and RPMEM ideal for different applications. If you want to learn more about the performance achievable with RPMEM please follow the link: <a href="https://pmem.io/rpma/reports/index.html" target="_blank">Performance Reports</a>.

<p>
This example is an introduction to RPMEM. I will guide you briefly through setting up all required hardware and software components and verifying whether the connection works properly. Having that, I will show you how to access Persistent Memory on a remote system using a librpma library (where RPMA stands for Remote Persistent Memory Access, makes sense right?).

<p>
After completing this example you will:
<ul>
    <li>what is RPMEM and what is good for</li>
    <li>how RPMEM is different compared to PMEM</li>
    <li>what hardware and software components are required to start using RPMEM</li>
    <li>how to verify the RDMA network works properly<li>
    <li>how to use librpma API to:
        <ul>
            <li>establish a connection,</li>
            <li>prepare memory for remote manipulation,</li>
            <li>manipulate memory on the remote system,</li>
            <li>assure persistency of stores to the remote system.</li>
        </ul>
    </li>
</ul>

{{template "scrollToContinue"}}

<p>
Step-by-step you will:
<ul>
    <li>test the connection on the basic level using ping</li>
    <li>test the connection RDMA capabilities using rping</li>
    <li>review an application focusing on establishing a connection</li>
    <li>review an application reading remote system's memory and write its back in a persistent manner.</li>
</ul>

{{step "Connectivity check"}}

<p>
XXX
- briefly what network hardware and software components are required
- describe the networking environment (IPs etc.)
- describe what and how is achieved during this step

{{edit "run_test_ping.sh"}}

{{run "./run_test_ping.sh"}}

<p>
XXX
- introduce rping(1)
- what rping does comparing to ping?
- describe what and how is achieved during this step

{{edit "run_test_rping.sh"}}

{{run "./run_test_rping.sh"}}

{{step "Establishing a connection"}}

<p>
XXX
- introduce the librpma library
- maybe put here the schematic showing where librpma fits into the Linux RDMA-capable stack
- describe that the following program focuses solely on establishing a connection

{{edit "simple_client.c" "simple_server.c" "connection.h" "connection.c" "CMakeLists.txt" "build_simple.sh"}}

{{build "./build_simple.sh"}}

{{edit "run_simple.sh"}}

{{run "./run_simple.sh"}}

{{step "Remote Persistent Memory access"}}

<p>
XXX
- introduce used rpma_read/write/flush() operations and
- describe their role in achieving remote persistency
- describe what the example does
- refer the "connection.h" "connection.c" files are taken from the previous step

{{edit "client.c" "server.c" "connection.h" "build_main.sh"}}

{{build "./build_main.sh"}}

{{edit "run_main.sh"}}

{{run "./run_main.sh"}}

{{summary}}

<p>
XXX
- recap what has been done during this training
- takeaways
- if you want to learn more please read the our materials:
    - examples
    - white paper
    - anything else?

{{bottom}}
