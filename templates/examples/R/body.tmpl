{{top "Remote Persistent Memory"}}

<p class="intro">
XXX
- what is RPMEM?
- what is the difference between PMEM and RPMEM?
- what RPMEM is good for?
- what the trainee will do during this tutorial (high-level)?
- expected outcomes for the trainee

{{template "scrollToContinue"}}

<p>
XXX
- introduce what step-by-step will happen during this tutorial
    - ping / rping connectivity check
    - a simple "just esablish a connection" program
    - the final program general idea

{{step "Connectivity check"}}

<p>
In order to have a real RDMA network you have to have:
<ul>
    <li>two machines both equipped with RDMA-capable network adapters connected to each other,</li>
    <li>libibverbs and librdmacm libraries installed in both systems (or the rdma-core package containing both of them).</li>
</ul>

<p>
Alternatively, for development purposes, you can use a software-emulated RDMA network interface (SoftRoCE) which requires:
<ul>
    <li>one machine with a regular Ethernet network adapter,</li>
    <li>the above listed libraries and</li>
    <li>the 'rdma_rxe' kernel module loaded.</li>
</ul>

<p>
All used network interfaces should be configured, up and running with an IP address assigned.

<p>
In this step, we will check the basic Ethernet network connectivity using the ping command
(see the <a href="https://linux.die.net/man/8/ping" target="_blank">ping(8) manual</a> for details).

{{edit "run_test_ping.sh"}}

{{run "./run_test_ping.sh"}}

<p>
In this step we will check the RDMA CM connection with the RDMA ping-pong test using the rping command
(provided by the librdmacm-utils package).

<p>
The rping(1) command establishes a reliable RDMA connection between two nodes using librdmacm
and optionally performs RDMA transfers between the nodes, then disconnects. When rping works,
we know that the RDMA connection is correctly configured and works well.

{{edit "run_test_rping.sh"}}

{{run "./run_test_rping.sh"}}

{{step "Establishing a connection"}}

<p>
The Remote Persistent Memory Access (RPMA) Library is a C library to simplify accessing persistent memory on remote hosts over Remote Direct Memory Access (RDMA). For more information, see <a href="https://pmem.io/rpma/" target="_blank">pmem.io</a>.

<p>
XXX - maybe put here the schematic showing where librpma fits into the Linux RDMA-capable stack

<p>
This example implements two parts of the connection establishing process:
<ul>
    <li>a server which will be waiting for incoming connections using single RPMA endpoint (see the <a href="https://pmem.io/rpma/manpages/master/librpma.7.html#server-operation" target="_blank">server operation documentation</a> for details).</li>
    <li>a client which will initiate establishing the connection to the server (see the <a href="https://pmem.io/rpma/manpages/master/librpma.7.html#client-operation" target="_blank">client operation documentation</a> for details)</li>
</ul>

{{edit "simple_client.c" "simple_server.c" "connection.h" "connection.c" "CMakeLists.txt" "build_simple.sh"}}

{{build "./build_simple.sh"}}

{{edit "run_simple.sh"}}

{{run "./run_simple.sh"}}

{{step "Remote Persistent Memory access"}}

<p>
XXX
- introduce used rpma_read/write/flush() operations and
- describe their role in achieving remote persistency
- describe what the example does
- refer the "connection.h" "connection.c" files are taken from the previous step

{{edit "client.c" "server.c" "connection.h" "build_main.sh"}}

{{build "./build_main.sh"}}

{{edit "run_main.sh"}}

{{run "./run_main.sh"}}

{{summary}}

<p>
XXX
- recap what has been done during this training
- takeaways
- if you want to learn more please read the our materials:
    - examples
    - white paper
    - anything else?

{{bottom}}
